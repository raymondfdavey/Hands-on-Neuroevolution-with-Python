



[NEAT]
# Fitness criterion: Specifies the goal of the optimization. 'max' means the algorithm will try to maximize the fitness function, while 'min' would try to minimize it.
fitness_criterion     = max

# Fitness threshold: When the fitness computed by fitness_criterion meets or exceeds this threshold, the evolution process will terminate, with a call to any registered reporting class’ found_solution method..
fitness_threshold     = 60

# Population size: The number of individual organisms in each generation. A larger population may increase diversity but also computational cost.
pop_size              = 150

# If this evaluates to True, when all species simultaneously become extinct due to stagnation, a new random population will be created. If False, a CompleteExtinctionException will be thrown..
reset_on_extinction   = True

# If this evaluates to True, then the fitness_criterion and fitness_threshold are ignored for termination; only valid if termination by a maximum number of generations passed to population.Population.run() is enabled, and the found_solution method is called upon generation number termination. If it evaluates to False, then fitness is used to determine termination. This defaults to “False”.
no_fitness_termination = False

[DefaultSpeciesSet]
# The DefaultSpeciesSet section specifies parameters for the builtin DefaultSpeciesSet class. This section is only necessary if you specify this class as the genome implementation when creating the Config instance; otherwise you need to include whatever configuration (if any) is required for your particular implementation.

# Individuals whose genomic distance is less than this threshold are considered to be in the same species.
compatibility_threshold = 2.5

[DefaultStagnation]
# The DefaultStagnation section specifies parameters for the builtin DefaultStagnation class. This section is only necessary if you specify this class as the stagnation implementation when creating the Config instance; otherwise you need to include whatever configuration (if any) is required for your particular implementation.

# The function used to compute species fitness. This defaults to ``mean``. Allowed values are: max, min, mean, and median.
species_fitness_func = max

# Species that have not shown improvement in more than this number of generations will be considered stagnant and removed. This defaults to 15..
max_stagnation       = 20

# The number of species that will be protected from stagnation; mainly intended to prevent total extinctions caused by all species becoming stagnant before new species arise. For example, a species_elitism setting of 3 will prevent the 3 species with the highest species fitness from being removed for stagnation regardless of the amount of time they have not shown improvement. This defaults to 0..
species_elitism      = 2

[DefaultReproduction]
# The DefaultReproduction section specifies parameters for the builtin DefaultReproduction class. This section is only necessary if you specify this class as the reproduction implementation when creating the Config instance; otherwise you need to include whatever configuration (if any) is required for your particular implementation.

# Elitism: The number of most-fit individuals in each species that will be preserved as-is from one generation to the next. This defaults to 0..
elitism            = 2

# The fraction for each species allowed to reproduce each generation. This defaults to 0.2. A lower value increases selection pressure.
survival_threshold = 0.15

# The minimum number of genomes per species after reproduction. This defaults to 2.
min_species_size   = 2


[DefaultGenome]
#The DefaultGenome section specifies parameters for the builtin DefaultGenome class. This section is only necessary if you specify this class as the genome implementation when creating the Config instance; otherwise you need to include whatever configuration (if any) is required for your particular implementation.

# Activation default: The default activation function for nodes. Options include 'sigmoid', 'tanh', 'relu', 'identity', etc., each with different mathematical properties.
activation_default      = tanh

# Activation mutate rate: The probability that the activation function of a node will mutate. A higher rate increases diversity but may lead to instability.(only for genome with multiple activation eg CPPN)
activation_mutate_rate  = 0.0

# Activation options: A list of available activation functions that can be used in the network. Can include any combination of 'sigmoid', 'tanh', 'relu', 'identity', etc.
activation_options      = sigmoid tanh abs relu

# Aggregation default: The default method for aggregating multiple inputs to a node. 'sum' adds them together, while 'mean' takes the average, etc.
aggregation_default     = sum

# Aggregation mutate rate: The probability that the aggregation method of a node will mutate.
aggregation_mutate_rate = 0.3

# A space-separated list of the aggregation functions that may be used by nodes. This defaults to “sum”. The available functions (defined in aggregations) are: sum, product, min, max, mean, median, and maxabs (which returns the input value with the greatest absolute value; the returned value may be positive or negative). New aggregation functions can be defined similarly to new activation functions. (Note that the function needs to take a list or other iterable; the reduce function, as in aggregations, may be of use in this.)
aggregation_options     = product mean


# Bias Options
# The initial mean value for the bias terms in the network. A bias term allows the activation function to be shifted horizontally, which can help the network fit the data better.
bias_init_mean          = 0.0 

# The initial standard deviation for the bias terms. This controls the spread of the initial bias values, allowing for more diversity in the initial population.
bias_init_stdev         = 1.0 

# The maximum allowable values for the bias. Constraining the bias within a range can prevent extreme values that might cause instability.
bias_max_value          = 30.0 

# The minimum allowable values for the bias.
bias_min_value          = -30.0 

# The magnitude of changes made during bias mutations. A higher value will result in larger changes to the bias during mutation.
bias_mutate_power       = 0.5 

# The probability that a bias value will be mutated. A higher rate increases the chance of mutation, potentially leading to more diversity but also more instability.
bias_mutate_rate        = 0.7 

# The probability that a bias value will be replaced with a new random value. This can introduce additional diversity into the population.
bias_replace_rate       = 0.1 


# Compatibility Coefficients
# A coefficient that determines how much disjoint genes (genes that do not match between two genomes) contribute to the compatibility distance. Higher values make the algorithm more sensitive to structural differences.
compatibility_disjoint_coefficient = 1.0 

# A coefficient that determines how much differences in connection weights contribute to the compatibility distance. Higher values make the algorithm more sensitive to weight differences.
compatibility_weight_coefficient   = 0.5 


# Connection Add/Remove Probabilities
# The probability that a new connection will be added between two previously unconnected nodes during mutation.
conn_add_prob           = 0.5 

# The probability that an existing connection will be removed during mutation. Together with conn_add_prob, these parameters control the evolving complexity of the network.
conn_delete_prob        = 0.5 


# Connection Enable Options
# The default state for new connections (enabled or disabled). If set to False, new connections are initially disabled and must be explicitly enabled.
enabled_default         = True 

# The probability that the enabled state of a connection will be mutated. This allows the algorithm to explore enabling or disabling specific connections.
enabled_mutate_rate     = 0.2 

# Feed Forward
# If set to True, the network will be strictly feed-forward, meaning no recurrent connections are allowed. This can simplify the network and make training more tractable. If this evaluates to True, generated networks will not be allowed to have recurrent connections (they will be feedforward). Otherwise they may be (but are not forced to be) recurrent..
feed_forward            = False 

# Initial Connection
# Specifies the initial connectivity of newly-created genomes. (Note the effects on settings other than unconnected of the enabled_default parameter.) There are seven allowed values:

#unconnected - No connections are initially present. This is the default.

#fs_neat_nohidden - One randomly-chosen input node has one connection to each output node. (This is one version of the FS-NEAT scheme; “FS” stands for “Feature Selection”.)

#fs_neat_hidden - One randomly-chosen input node has one connection to each hidden and output node. (This is another version of the FS-NEAT scheme. If there are no hidden nodes, it is the same as fs_neat_nohidden.)

#full_nodirect - Each input node is connected to all hidden nodes, if there are any, and each hidden node is connected to all output nodes; otherwise, each input node is connected to all output nodes. Genomes with feed_forward set to False will also have recurrent (loopback, in this case) connections from each hidden or output node to itself.

#full_direct - Each input node is connected to all hidden and output nodes, and each hidden node is connected to all output nodes. Genomes with feed_forward set to False will also have recurrent (loopback, in this case) connections from each hidden or output node to itself.

#partial_nodirect # - As for full_nodirect, but each connection has a probability of being present determined by the number (valid values are in [0.0, 1.0]).

#partial_direct # - as for full_direct, but each connection has a probability of being present determined by the number (valid values are in [0.0, 1.0])..
initial_connection      = unconnected 


# Node Add/Remove Probabilities
# The probability that a new node will be added during mutation.
node_add_prob           = 0.2

# The probability that an existing node will be removed during mutation. These parameters control the evolving complexity of the network.
node_delete_prob        = 0.2 


# Network Parameters
# Number of hidden nodes.
num_hidden              = 3

# Number of input nodes.
num_inputs = 3

# Number of output nodes. These parameters define the basic structure of the network.
num_outputs             = 1 


# Node Response Options
# Initial mean for the response values, affecting the sensitivity of the node to its input.
response_init_mean      = 1.0 

# Initial standard deviation for response values.
response_init_stdev     = 0.0 

# Maximum allowable response values.
response_max_value      = 30.0 

# Minimum allowable response values.
response_min_value      = -30.0 

# Magnitude of response mutations.
response_mutate_power   = 0.0 

# Probability of mutating a response value.
response_mutate_rate    = 0.0 

# Probability of replacing a response value with a new random value.
response_replace_rate   = 0.0 

# Connection Weight Options
# Initial mean for connection weight values.
weight_init_mean        = 0.0 

# Initial standard deviation for weight values.
weight_init_stdev       = 1.0 

# Maximum allowable weight values.
weight_max_value        = 30 

# Minimum allowable weight values.
weight_min_value        = -30 

# Magnitude of weight mutations.
weight_mutate_power     = 0.3

# Probability of mutating a weight value.
weight_mutate_rate      = 0.6

# Probability of replacing a weight value with a new random value.
weight_replace_rate     = 0.2 



#[DefaultGenome] section
#The DefaultGenome section specifies parameters for the builtin DefaultGenome class. This section is only necessary if you specify this class as the genome implementation when creating the Config instance; otherwise you need to include whatever configuration (if any) is required for your particular implementation.
#
#activation_default
#The default activation function attribute assigned to new nodes. If none is given, or “random” is specified, one of the activation_options will be chosen at random.
#activation_mutate_rate
#The probability that mutation will replace the node’s activation function with a randomly-determined member of the activation_options. Valid values are in [0.0, 1.0].
#activation_options
#A space-separated list of the activation functions that may be used by nodes. This defaults to sigmoid. The built-in available functions can be found in Overview of builtin activation functions; more can be added as described in Customizing Behavior.
#aggregation_default
#The default aggregation function attribute assigned to new nodes. If none is given, or “random” is specified, one of the aggregation_options will be chosen at random.
#aggregation_mutate_rate
#The probability that mutation will replace the node’s aggregation function with a randomly-determined member of the aggregation_options. Valid values are in [0.0, 1.0].
#aggregation_options
#A space-separated list of the aggregation functions that may be used by nodes. This defaults to “sum”. The available functions (defined in aggregations) are: sum, product, min, max, mean, median, and maxabs (which returns the input value with the greatest absolute value; the returned value may be positive or negative). New aggregation functions can be defined similarly to new activation functions. (Note that the function needs to take a list or other iterable; the reduce function, as in aggregations, may be of use in this.)
#
#Changed in version 0.92: Moved out of genome into aggregations; maxabs, mean, and median added; method for defining new aggregation functions added.
#
#bias_init_mean
#The mean of the normal/gaussian distribution, if it is used to select bias attribute values for new nodes.
#bias_init_stdev
#The standard deviation of the normal/gaussian distribution, if it is used to select bias values for new nodes.
#bias_init_type
#If set to gaussian or normal, then the initialization is to a normal/gaussian distribution. If set to uniform, a uniform distribution from max(𝑏𝑖𝑎𝑠_𝑚𝑖𝑛_𝑣𝑎𝑙𝑢𝑒,(𝑏𝑖𝑎𝑠_𝑖𝑛𝑖𝑡_𝑚𝑒𝑎𝑛−(𝑏𝑖𝑎𝑠_𝑖𝑛𝑖𝑡_𝑠𝑡𝑑𝑒𝑣∗2)))
# to min(𝑏𝑖𝑎𝑠_𝑚𝑎𝑥_𝑣𝑎𝑙𝑢𝑒,(𝑏𝑖𝑎𝑠_𝑖𝑛𝑖𝑡_𝑚𝑒𝑎𝑛+(𝑏𝑖𝑎𝑠_𝑖𝑛𝑖𝑡_𝑠𝑡𝑑𝑒𝑣∗2)))
#. (Note that the standard deviation of a uniform distribution is not range/0.25, as implied by this, but the range divided by a bit over 0.288 (the square root of 12); however, this approximation makes setting the range much easier.) This defaults to “gaussian”.
#
#New in version 0.92.
#
#bias_max_value
#The maximum allowed bias value. Biases above this value will be clamped to this value.
#bias_min_value
#The minimum allowed bias value. Biases below this value will be clamped to this value.
#bias_mutate_power
#The standard deviation of the zero-centered normal/gaussian distribution from which a bias value mutation is drawn.
#bias_mutate_rate
#The probability that mutation will change the bias of a node by adding a random value.
#bias_replace_rate
#The probability that mutation will replace the bias of a node with a newly chosen random value (as if it were a new node).
#compatibility_disjoint_coefficient
#The coefficient for the disjoint and excess gene counts’ contribution to the genomic distance.
#compatibility_weight_coefficient
#The coefficient for each weight, bias, or response multiplier difference’s contribution to the genomic distance (for homologous nodes or connections). This is also used as the value to add for differences in activation functions, aggregation functions, or enabled/disabled status.
#Note
#
#It is currently possible for two homologous nodes or connections to have a higher contribution to the genomic distance than a disjoint or excess node or connection, depending on their attributes and the settings of the above parameters.
#
#conn_add_prob
#The probability that mutation will add a connection between existing nodes. Valid values are in [0.0, 1.0].
#conn_delete_prob
#The probability that mutation will delete an existing connection. Valid values are in [0.0, 1.0].
#enabled_default
#The default enabled attribute of newly created connections. Valid values are True and False.
#Note
#
#“Newly created connections” include ones in newly-created genomes, if those have initial connections (from the setting of the initial_connection variable).
#
#enabled_mutate_rate
#The probability that mutation will replace (50/50 chance of True or False) the enabled status of a connection. Valid values are in [0.0, 1.0].
#enabled_rate_to_false_add
#Adds to the enabled_mutate_rate if the connection is currently enabled.
#
#enabled_rate_to_true_add
#Adds to the enabled_mutate_rate if the connection is currently not enabled.
#
#New in version 0.92: enabled_rate_to_false_add and enabled_rate_to_true_add
#
#feed_forward
#If this evaluates to True, generated networks will not be allowed to have recurrent connections (they will be feedforward). Otherwise they may be (but are not forced to be) recurrent.
#initial_connection
#Specifies the initial connectivity of newly-created genomes. (Note the effects on settings other than unconnected of the enabled_default parameter.) There are seven allowed values:
#unconnected - No connections are initially present. This is the default.
#fs_neat_nohidden - One randomly-chosen input node has one connection to each output node. (This is one version of the FS-NEAT scheme; “FS” stands for “Feature Selection”.)
#fs_neat_hidden - One randomly-chosen input node has one connection to each hidden and output node. (This is another version of the FS-NEAT scheme. If there are no hidden nodes, it is the same as fs_neat_nohidden.)
#full_nodirect - Each input node is connected to all hidden nodes, if there are any, and each hidden node is connected to all output nodes; otherwise, each input node is connected to all output nodes. Genomes with feed_forward set to False will also have recurrent (loopback, in this case) connections from each hidden or output node to itself.
#full_direct - Each input node is connected to all hidden and output nodes, and each hidden node is connected to all output nodes. Genomes with feed_forward set to False will also have recurrent (loopback, in this case) connections from each hidden or output node to itself.
#partial_nodirect # - As for full_nodirect, but each connection has a probability of being present determined by the number (valid values are in [0.0, 1.0]).
#partial_direct # - as for full_direct, but each connection has a probability of being present determined by the number (valid values are in [0.0, 1.0]).
#Changed in version 0.92: fs_neat split into fs_neat_nohidden and fs_neat_hidden; full, partial split into full_nodirect, full_direct, partial_nodirect, partial_direct
#
#node_add_prob
#The probability that mutation will add a new node (essentially replacing an existing connection, the enabled status of which will be set to False). Valid values are in [0.0, 1.0].
#node_delete_prob
#The probability that mutation will delete an existing node (and all connections to it). Valid values are in [0.0, 1.0].
#num_hidden
#The number of hidden nodes to add to each genome in the initial population.
#num_inputs
#The number of input nodes, through which the network receives inputs.
#num_outputs
#The number of output nodes, to which the network delivers outputs.
#response_init_mean
#The mean of the normal/gaussian distribution, if it is used to select response multiplier attribute values for new nodes.
#response_init_stdev
#The standard deviation of the normal/gaussian distribution, if it is used to select response multipliers for new nodes.
#response_init_type
#If set to gaussian or normal, then the initialization is to a normal/gaussian distribution. If set to uniform, a uniform distribution from max(𝑟𝑒𝑠𝑝𝑜𝑛𝑠𝑒_𝑚𝑖𝑛_𝑣𝑎𝑙𝑢𝑒,(𝑟𝑒𝑠𝑝𝑜𝑛𝑠𝑒_𝑖𝑛𝑖𝑡_𝑚𝑒𝑎𝑛−(𝑟𝑒𝑠𝑝𝑜𝑛𝑠𝑒_𝑖𝑛𝑖𝑡_𝑠𝑡𝑑𝑒𝑣∗2)))
# to min(𝑟𝑒𝑠𝑝𝑜𝑛𝑠𝑒_𝑚𝑎𝑥_𝑣𝑎𝑙𝑢𝑒,(𝑟𝑒𝑠𝑝𝑜𝑛𝑠𝑒_𝑖𝑛𝑖𝑡_𝑚𝑒𝑎𝑛+(𝑟𝑒𝑠𝑝𝑜𝑛𝑠𝑒_𝑖𝑛𝑖𝑡_𝑠𝑡𝑑𝑒𝑣∗2)))
#. (Note that the standard deviation of a uniform distribution is not range/0.25, as implied by this, but the range divided by a bit over 0.288 (the square root of 12); however, this approximation makes setting the range much easier.) This defaults to “gaussian”.
#
#New in version 0.92.
#
#response_max_value
#The maximum allowed response multiplier. Response multipliers above this value will be clamped to this value.
#response_min_value
#The minimum allowed response multiplier. Response multipliers below this value will be clamped to this value.
#response_mutate_power
#The standard deviation of the zero-centered normal/gaussian distribution from which a response multiplier mutation is drawn.
#response_mutate_rate
#The probability that mutation will change the response multiplier of a node by adding a random value.
#response_replace_rate
#The probability that mutation will replace the response multiplier of a node with a newly chosen random value (as if it were a new node).
#single_structural_mutation
#If this evaluates to True, only one structural mutation (the addition or removal of a node or connection) will be allowed per genome per generation. (If the probabilities for conn_add_prob, conn_delete_prob, node_add_prob, and node_delete_prob add up to over 1, the chances of each are proportional to the appropriate configuration value.) This defaults to “False”.
#
#New in version 0.92.
#
#structural_mutation_surer
#If this evaluates to True, then an attempt to add a node to a genome lacking connections will result in adding a connection instead; furthermore, if an attempt to add a connection tries to add a connection that already exists, that connection will be enabled. If this is set to default, then it acts as if it had the same value as single_structural_mutation (above). This defaults to “default”.
#
#New in version 0.92.
#
#weight_init_mean
#The mean of the normal/gaussian distribution used to select weight attribute values for new connections.
#weight_init_stdev
#The standard deviation of the normal/gaussian distribution used to select weight values for new connections.
#weight_init_type
#If set to gaussian or normal, then the initialization is to a normal/gaussian distribution. If set to uniform, a uniform distribution from max(𝑤𝑒𝑖𝑔ℎ𝑡_𝑚𝑖𝑛_𝑣𝑎𝑙𝑢𝑒,(𝑤𝑒𝑖𝑔ℎ𝑡_𝑖𝑛𝑖𝑡_𝑚𝑒𝑎𝑛−(𝑤𝑒𝑖𝑔ℎ𝑡_𝑖𝑛𝑖𝑡_𝑠𝑡𝑑𝑒𝑣∗2)))
# to min(𝑤𝑒𝑖𝑔ℎ𝑡_𝑚𝑎𝑥_𝑣𝑎𝑙𝑢𝑒,(𝑤𝑒𝑖𝑔ℎ𝑡_𝑖𝑛𝑖𝑡_𝑚𝑒𝑎𝑛+(𝑤𝑒𝑖𝑔ℎ𝑡_𝑖𝑛𝑖𝑡_𝑠𝑡𝑑𝑒𝑣∗2)))
#. (Note that the standard deviation of a uniform distribution is not range/0.25, as implied by this, but the range divided by a bit over 0.288 (the square root of 12); however, this approximation makes setting the range much easier.) This defaults to “gaussian”.
#
#New in version 0.92.
#
#weight_max_value
#The maximum allowed weight value. Weights above this value will be clamped to this value.
#weight_min_value
#The minimum allowed weight value. Weights below this value will be clamped to this value.
#weight_mutate_power
#The standard deviation of the zero-centered normal/gaussian distribution from which a weight value mutation is drawn.
#weight_mutate_rate
#The probability that mutation will change the weight of a connection by adding a random value.
#weight_replace_rate
#The probability that mutation will replace the weight of a connection with a newly chosen random value (as if it were a new connection).
#'''